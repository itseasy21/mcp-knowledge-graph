{"type":"entity","name":"MemoryServer","entityType":"Server","observations":["Memory MCP server initialized with command: npx -y @itseasy21/mcp-knowledge-graph --memory-path ./.roo/memory.jsonl"],"createdAt":"2025-04-14T23:14:34.937Z","version":1}
{"type":"entity","name":"Freezed","entityType":"Library","observations":["Suppress DiagnosticableTreeMixin abstract method errors by adding 'non_abstract_class_inherits_abstract_member: ignore' to analyzer errors in analysis_options.yaml","location.dart and theme_state.dart updated to use sealed class idiom for Freezed 3.x compliance.","Freezed models use @freezed (lowercase), sealed class, private constructor for custom methods, and non-const factories.","Freezed factory usage updated to remove const.","build_runner and all tests pass after migration."],"createdAt":"2025-04-15T11:04:10.476Z","version":2}
{"type":"entity","name":"Filesystem HAL Storage","entityType":"Component","observations":["Phase 1 (repository interface and config) of the filesystem HAL storage plan is complete.","Platform-specific repository tests exist for Android, iOS, and Web.","All platforms now check filesystem first in loadLocations().","Storage permission is requested via HAL on app boot; app blocks startup if denied."],"createdAt":"2025-04-14T23:31:06.984Z","version":1}
{"type":"entity","name":"UI Guidelines","entityType":"Practice","observations":["AppBar and drawer are siblings in MainNavigationScreen; HomeScreen is a content widget only.","Settings screen and map tile error suppression are implemented.","All animations were removed from UnifiedResultsDisplay for search results to fix layout errors.","Diagnostic logs are removed from production UI code."],"createdAt":"2025-04-14T23:31:06.984Z","version":1}
{"type":"entity","name":"Search Functionality","entityType":"Feature","observations":["SearchBar is connected to searchControllerProvider in MainNavigationScreen.","_onSearch method with debouncing is implemented.","SearchBar callbacks updated to call _onSearch.","Clear button clears search controller state.","AnimatedCrossFade and AnimatedSwitcher were removed from search UI to fix RenderAnimatedSize layout errors.","The issue originated from a refactor where the SearchBar was moved but lost its connection to the search controller.","UI tests are used to diagnose search reliability issues with multiple consecutive conversion searches."],"createdAt":"2025-04-14T23:31:06.984Z","version":1}
{"type":"entity","name":"Maps","entityType":"Feature","observations":["Map tile path is platform-aware: uses /sdcard/filesystem/20MAR2025/maps on Android, relative path on desktop/web.","Maximum zoom level for maps is set to 14 (was 18).","Custom tile provider can suppress map tile errors.","Settings allow toggling map tile error visibility."],"createdAt":"2025-04-14T23:31:06.984Z","version":1}
{"type":"entity","name":"LoggingSystem","entityType":"Architecture","observations":["Core components include LogLevel enum, LogEntry model, LogOutput interface, LogFilter interface, and LoggerService","LogLevel defines severity levels: none, debug, info, warning, error, fatal","LogEntry is a Freezed data class representing a log message with metadata (timestamp, level, message, source, error, stackTrace)","LoggerService is the central component that manages outputs, filters, and provides log methods","Log flow: Application code calls logger methods → LoggerService creates LogEntry → Entry is checked against filters → If it passes, sent to all outputs","Multiple output targets are supported (console, expandable to file, cloud, etc.)","ConsoleLogOutput provides terminal output with color formatting and icons for success/fail messages","Integration with Riverpod for dependency injection and state management","Global error catching is integrated via runZonedGuarded in main.dart","Default log level is set to info via logFiltersProvider in logger_providers.dart."],"createdAt":"2025-04-14T23:36:52.851Z","version":1}
{"type":"entity","name":"LoggerService","entityType":"Service","observations":["Main service that handles log routing and filtering","Provides convenience methods for each log level: debug, info, warning, error, fatal","Can be created with named source for context-specific logging","Manages lists of LogOutput and LogFilter implementations","Creates LogEntry objects with timestamp, level, message, and optional context","Checks if entry passes all filters before sending to outputs","Can be injected into classes via constructor or accessed via extension methods","Extension methods allow access from Ref, WidgetRef, and BuildContext"],"createdAt":"2025-04-14T23:36:52.851Z","version":1}
{"type":"entity","name":"LogFilters","entityType":"Component","observations":["LogFilter is an interface with shouldLog(LogEntry) method that returns boolean","LevelLogFilter is the primary implementation that filters based on minimum severity level","Custom filters can be created by implementing LogFilter interface","Multiple filters can be chained; an entry must pass ALL filters to be logged","Filters are configured via the logFiltersProvider in Riverpod","Sensitive data can be filtered using custom filter implementations","Map tile error messages can be completely suppressed when enabled through settings"],"createdAt":"2025-04-14T23:36:52.851Z","version":1}
{"type":"entity","name":"LogOutputs","entityType":"Component","observations":["LogOutput is an interface with log(LogEntry) and dispose() methods","ConsoleLogOutput is the primary implementation that formats and writes to console","Custom outputs can be created by implementing LogOutput interface","Multiple outputs can receive the same log entry simultaneously","Outputs are configured via the logOutputsProvider in Riverpod","FileLogOutput example shows how to implement file-based logging with rotation","Each output formats log entries according to its own requirements"],"createdAt":"2025-04-14T23:36:52.851Z","version":1}
{"type":"entity","name":"TestLogging","entityType":"Practice","observations":["Tests use a specific logging configuration defined in test/helpers/test_config.dart","By default, tests suppress all logs by setting the log level to NONE to keep output clean","createTestContainer() function creates a Riverpod container with test logging configuration","createTestLogger() creates a logger with the default test configuration","Tests should add debug logs when they fail to help diagnose issues, then remove them once fixed","Descriptive sources should be used for loggers in tests (e.g., 'UserAuthTest')","Custom log configurations should be reset after test debugging","TestLogOutput implementation can capture and verify logging behavior in tests"],"createdAt":"2025-04-14T23:36:52.851Z","version":1}
{"type":"entity","name":"LogLevels","entityType":"Enumeration","observations":["none: Suppresses all logs (useful for tests or silencing output)","debug: Detailed information for debugging (configuration loaded, variable values)","info: Normal application behavior information (user logged in, operation completed)","warning: Potential issues that don't prevent operation (rate limit approaching)","error: Application failures that affect functionality (API failures, data load errors)","fatal: Critical failures that prevent application from continuing (database connection lost)","In tests, default level is none (suppress all) but can be raised for debugging","Production code usually uses debug or info as the minimum level"],"createdAt":"2025-04-14T23:36:52.851Z","version":1}
{"type":"entity","name":"LoggingInRepositories","entityType":"Pattern","observations":["Repositories inject LoggerService via constructor","Typically use debug level for data operations (getting/setting data)","Use info level for important state changes","Use warning for non-critical issues (e.g., empty results when expected data)","Use error level for operation failures with error and stack trace","Structured logging with context (IDs, query parameters)","LocationsRepository is a key example that uses injected LoggerService","All repository methods include appropriate logging"],"createdAt":"2025-04-14T23:36:52.851Z","version":1}
{"type":"entity","name":"RiverpodLoggingIntegration","entityType":"Pattern","observations":["loggerServiceProvider creates the main LoggerService instance","logOutputsProvider configures the list of LogOutput implementations","logFiltersProvider configures the list of LogFilter implementations","namedLoggerProvider.family creates source-specific loggers","Extension methods on Ref (ref.logger, ref.loggerFor)","Extension methods on WidgetRef (ref.logger, ref.loggerFor)","Extension methods on BuildContext (context.logger)","ProviderLogger integrates with Riverpod's logging system"],"createdAt":"2025-04-14T23:36:52.851Z","version":1}
{"type":"entity","name":"ApplicationArchitecture","entityType":"Architecture","observations":["Follows Repository-Service-Provider Pattern with Riverpod","Data flow: Data Sources → Repositories → Services → Providers → UI Components","Repositories handle data operations and abstract data sources","Service Layer adds business logic on top of repositories","Riverpod Providers expose repositories and transform repository data","StateNotifier classes bridge between repositories/services and UI","UI Components consume providers to access state and update based on changes","Logging is integrated at all levels of the architecture"],"createdAt":"2025-04-14T23:36:52.851Z","version":1}
{"type":"entity","name":"LoggingBestPractices","entityType":"Practice","observations":["Use appropriate log levels: Reserve error and fatal for actual errors","Include context: Add meaningful source names and context to log messages","Structure messages: Format log messages consistently for easier searching","Don't over-log: In performance-critical code paths, consider if logging is necessary","Respect privacy: Avoid logging sensitive data like passwords or tokens","Use named loggers: For larger classes or subsystems, use named loggers","In tests: Use the default NONE level for most tests, only temporarily lower for debugging","Always log errors with stack traces for better troubleshooting"],"createdAt":"2025-04-14T23:36:52.851Z","version":1}
{"type":"entity","name":"LogFiltering","entityType":"Concept","observations":["Log filtering determines which log entries are processed based on filters like log level or content","LevelLogFilter is the primary implementation that filters logs based on minimum severity level","In normal app operation, logging is set to INFO level in logger_providers.dart line 18: LevelLogFilter(minLevel: LogLevel.info)","In tests, logs are filtered to NONE level in test_config.dart line 15 and line 60: LevelLogFilter(minLevel: LogLevel.none)","createTestContainer() creates a Riverpod container with test log filtering set to NONE","Debugging failing tests involves temporarily changing log filter level to DEBUG or INFO","Map tile errors can be completely filtered out using a dedicated filter when enabled in settings","LogFilter interface requires implementing shouldLog(LogEntry) method that returns boolean","Multiple filters can be chained; an entry must pass ALL filters to be processed","Custom log filters like SensitiveDataFilter can redact sensitive information without blocking logs","logFiltersProvider in Riverpod configures the active list of LogFilter implementations"],"createdAt":"2025-04-16T00:06:16.071Z","version":2}
{"type":"entity","name":"ProjectArchitecture","entityType":"Architecture","observations":["Project follows a layered architecture with Core and Feature layers","Core layer contains reusable components: HAL, logging, models, providers, repositories, services, theme, utils","Feature layer contains app-specific features: debug, home, locations, maps, navigation, search, settings","Cross-platform support for Android, iOS, Web, and Desktop with platform-specific implementations","Main app entry point configures global error handling, permissions, and initializes providers"],"createdAt":"2025-04-15T10:17:54.660Z","version":1}
{"type":"entity","name":"HAL","entityType":"Architecture","observations":["Hardware Abstraction Layer (HAL) provides platform-specific implementations behind common interfaces","Primary example is filesystem HAL with implementations for Android, iOS, Web, and Desktop","FileIO class provides unified error handling and logging around platform-specific repositories","Platform detection uses kIsWeb and Platform.isX checks to select appropriate implementation","Permission handling integrated into HAL (e.g., storage permission on Android)","App blocks startup if critical permissions like storage are denied","Platform-specific path resolving (e.g., /sdcard/filesystem on Android, relative paths on other platforms)"],"createdAt":"2025-04-15T10:17:54.661Z","version":1}
{"type":"entity","name":"RiverpodUsage","entityType":"Pattern","observations":["Riverpod is the primary state management and dependency injection framework","ProviderScope wraps the entire application at the root","ConsumerWidget and ConsumerStatefulWidget used for UI components that need to access providers","StateNotifier classes used for state management with immutable state","Provider families used for parameterized providers (e.g., namedLoggerProvider.family)","Extension methods on Ref, WidgetRef, and BuildContext for convenient access to common services","Provider overrides used for testing and dependency injection","ProviderLogger provides debug logging for provider updates, additions, and failures","Riverpod container created in main.dart before runApp for early access to services"],"createdAt":"2025-04-15T10:17:54.661Z","version":1}
{"type":"entity","name":"RepositoryPattern","entityType":"Pattern","observations":["Repositories abstract data sources and provide domain-specific data operations","Repository interfaces defined in core, implementations may be platform-specific","Repositories typically inject LoggerService for operation logging","FileSystemRepository is a key example with platform-specific implementations","LocationsRepository manages location data with filesystem-first approach","Repositories handle data caching, error handling, and data transformation","Repository providers make repositories available to services and UI","Each repository focuses on a specific domain entity or data source"],"createdAt":"2025-04-15T10:17:54.661Z","version":1}
{"type":"entity","name":"ServicePattern","entityType":"Pattern","observations":["Services implement business logic and orchestrate operations across repositories","Services are typically stateless and focus on operations rather than state","LoggerService is a primary example that orchestrates logging operations","Services inject repositories and other dependencies via constructor","Service providers make services available to the UI and other services","Each service focuses on a specific domain functionality","Services mediate between UI and data layers, providing a clean API"],"createdAt":"2025-04-15T10:17:54.661Z","version":1}
{"type":"entity","name":"UIArchitecture","entityType":"Architecture","observations":["Material Design-based UI with custom theming","MainNavigationScreen provides app shell with AppBar, SearchBar, Drawer, and BottomNavigationBar","Feature screens are loaded into an IndexedStack for tab navigation","HomeScreen serves as the main content screen with unified search results","Animations removed from search results display to fix layout errors","AppBar and drawer are siblings in MainNavigationScreen","Theme customization via ThemeSwitcher and theme providers","SearchBar with debouncing implemented in MainNavigationScreen"],"createdAt":"2025-04-15T10:17:54.661Z","version":1}
{"type":"entity","name":"DataFlow","entityType":"Pattern","observations":["Data flows from repositories through services to providers and finally to UI","UI interactions flow back from widgets to providers/notifiers to services to repositories","SearchController demonstrates this flow: UI input → debounce → controller notifier → search operation → state update → UI update","File operations flow: UI → service → repository → platform-specific implementation → OS","Error handling flows through the stack with logging at each layer","State changes trigger UI updates through Riverpod's reactive system"],"createdAt":"2025-04-15T10:17:54.661Z","version":1}
{"type":"entity","name":"FreezedUsagePatterns","entityType":"Pattern","observations":["Freezed 3.x uses sealed classes for unions instead of the older @freezed annotation pattern","Model classes use private constructors with factory methods for custom functionality","Non-const factories required in Freezed 3.x","json_serializable integration for JSON serialization/deserialization","copyWith methods used extensively for immutable state updates","Pattern matching with when method for sealed unions","LogEntry is a key Freezed model example in the logging system","ThemeState uses sealed class pattern for light/dark/system modes"],"createdAt":"2025-04-15T10:17:54.661Z","version":1}
{"type":"entity","name":"TestingPatterns","entityType":"Practice","observations":["Tests organized by feature and component type (unit, widget, integration)","Mocktail used for mocking dependencies in unit tests","createTestContainer creates a Riverpod container with test configuration","Test logging suppressed by default with log level set to NONE","UI tests verify search functionality with multiple consecutive searches","Platform-specific filesystem tests exist for Android, iOS, and Web","Provider overrides used to inject test implementations","Debug logs added to failing tests temporarily, then removed when fixed"],"createdAt":"2025-04-15T10:17:54.661Z","version":1}
{"type":"entity","name":"ErrorHandling","entityType":"Practice","observations":["Multi-level error handling strategy: widget level, Flutter framework level, and Dart zone level","ErrorWidget.builder customized to suppress specific errors (e.g., invalid image data)","FlutterError.onError customized for detailed error logging","runZonedGuarded catches all other Dart errors","Try-catch blocks with logging in all file operations","Repository methods return null or empty collections instead of throwing exceptions","Critical errors block app startup (e.g., storage permission denial)","Error details include source, context, and stack trace for troubleshooting"],"createdAt":"2025-04-15T10:17:54.661Z","version":1}
{"type":"entity","name":"PermissionHandling","entityType":"Pattern","observations":["Storage permission requested at app startup via FileIO.ensureStoragePermission()","App blocks with error message if critical permissions denied","Platform-specific permission handling (request on Android, no-op on other platforms)","Permission requests integrated with HAL layer","FileIO checks permissions before file operations","Permission status logged for diagnostics"],"createdAt":"2025-04-15T10:17:54.661Z","version":1}
{"type":"entity","name":"LocationsFeature","entityType":"Feature","observations":["Core feature for managing location data with filesystem storage","Uses HAL for platform-specific file access","Implements filesystem-first approach where locations are loaded from local files","Locations can be searched and displayed on maps","Locations are stored in a structured format with metadata","Repository uses logger for operation tracking","Integrated with search functionality for unified search experience"],"createdAt":"2025-04-15T10:18:42.493Z","version":1}
{"type":"entity","name":"BuildSystem","entityType":"ToolChain","observations":["Uses Flutter 3.x with Dart 3.7+","build_runner for code generation tasks","Freezed 3.x for immutable models with code generation","json_serializable for JSON parsing","riverpod_generator for Riverpod provider generation","Supports multiple platforms: Android, iOS, Web, and Desktop","Dependency injection primarily through Riverpod providers","'just' command used for common build tasks"],"createdAt":"2025-04-15T10:18:42.493Z","version":1}
{"type":"entity","name":"NavigationSystem","entityType":"Component","observations":["Combination of BottomNavigationBar for primary navigation and AppDrawer for secondary navigation","MainNavigationScreen provides the app shell with navigation components","IndexedStack used for tab switching without recreating screen state","Routing handled through named routes defined in MaterialApp","Navigation history managed by Flutter's built-in Navigator","MainNavigationScreen handles search input and state"],"createdAt":"2025-04-15T10:18:42.493Z","version":1}
{"type":"entity","name":"ThemeSystem","entityType":"Component","observations":["Supports light, dark, and system themes through ThemeMode","Custom ThemeSwitcher widget for user theme selection","Theme state managed by ThemeState sealed class with Freezed","Theme data provided through Riverpod providers (themeDataProvider, themeModeProvider)","Theme changes persisted through SharedPreferences","ThemeState implements light(), dark(), and system() factory constructors","Material 3 design tokens used for consistent styling"],"createdAt":"2025-04-15T10:18:42.493Z","version":1}
{"type":"entity","name":"SearchImplementation","entityType":"Component","observations":["Unified search from MainNavigationScreen with SearchBar widget","SearchControllerProvider manages search state and operations","Debouncing implemented with Timer to prevent excessive searches","Search results displayed in HomeScreen with unified display","Search supports both locations and conversions","Results update reactively through Riverpod state management","Animations removed from search result display to fix layout errors"],"createdAt":"2025-04-15T10:18:42.493Z","version":1}
{"type":"entity","name":"MapsImplementation","entityType":"Component","observations":["Implemented using flutter_map package (based on leaflet.js)","Custom tile provider with error suppression","Platform-specific tile path resolution","Maps screen displays locations from LocationRepository","Maximum zoom level limited to 14 to prevent excessive tile requests","Settings allow toggling map tile error visibility","Uses HAL for accessing map tile files"],"createdAt":"2025-04-15T10:18:42.493Z","version":1}
{"type":"entity","name":"PersistenceStrategy","entityType":"Pattern","observations":["Multiple persistence mechanisms: filesystem for locations, SharedPreferences for settings","HAL abstracts platform-specific filesystem access","FileIO provides unified error handling and logging around file operations","Filesystem access requires storage permission on Android","Settings persistence handled through SharedPreferences","Repository pattern encapsulates persistence operations","Map tiles stored in platform-specific locations"],"createdAt":"2025-04-15T10:18:42.493Z","version":1}
{"type":"entity","name":"FutureFeatures","entityType":"Planning","observations":["Knowledge graph planning is ongoing to help document the project architecture","Documentation structured in docs/plans/ with detailed subfolders","Plans organized into phases with specific tasks","Each planning task includes clear success criteria","Knowledge graph used to maintain understanding of project architecture and features","Documentation uses Markdown format","Tasks tracked with checkbox notation: - [ ] for pending, - [x] for completed"],"createdAt":"2025-04-15T10:18:42.493Z","version":1}
{"type":"entity","name":"DevelopmentWorkflow","entityType":"Practice","observations":["Uses 'just' command for common build tasks (see justfile for available commands)","build_runner workflow: 'just build' to generate code from Freezed, JSON serializable, and Riverpod annotations","Commit messages follow Angular.js format","Documentation lives in docs/plans/ with detailed subfolders for each feature/component","Plans are organized into numbered phases with specific tasks","Plans include checklists with task completion tracking","Each task has clear success criteria","Flutter hot reload used during development for fast iteration"],"createdAt":"2025-04-15T10:19:34.240Z","version":1}
{"type":"entity","name":"TestingStrategy","entityType":"Practice","observations":["Tests organized by feature in the test/ directory","Unit tests focus on individual components and business logic","Widget tests verify UI behavior and component integration","Integration tests check end-to-end workflows","Tests run from the pilot_buddy_app directory, not from subdirectories","Mocktail used for mocking dependencies in tests","Platform-specific tests exist for code with platform-specific behavior","UI tests verify search functionality with multiple consecutive searches","Debug logs temporarily added to failing tests, then removed when fixed","Riverpod container customized for testing with createTestContainer()"],"createdAt":"2025-04-15T10:19:34.240Z","version":1}
{"type":"entity","name":"FlutterIdioms","entityType":"Pattern","observations":["Riverpod Consumer widgets used for reactive UI updates","StateNotifier pattern for state management with immutable state","Extension methods on BuildContext, Ref, and WidgetRef for convenient access to common services","Platform-specific code isolated in HAL implementations","Widget composition pattern with small, focused widgets","Freezed models with pattern matching for state representation","Provider scoping pattern for dependency injection","Debouncing pattern used for search input handling","IndexedStack pattern for tab navigation without state loss","Theme customization through dedicated theme providers"],"createdAt":"2025-04-15T10:19:34.240Z","version":1}
{"type":"entity","name":"PerformanceConsiderations","entityType":"Practice","observations":["Maximum zoom level limited for maps to prevent excessive tile requests","Animations removed from search results display to fix layout errors","Debouncing implemented for search to prevent excessive operations","Efficient file access through platform-specific implementations","Lazy loading of app features through indexed stack navigation","Careful log level management to prevent excess logging in production","Image loading and caching optimized for maps","Memory leaks prevented by proper timer cleanup in stateful widgets","UI built with composition to minimize rebuilds"],"createdAt":"2025-04-15T10:19:34.240Z","version":1}
{"type":"entity","name":"MemoryUsageWorkflow","entityType":"Practice","observations":["Memory must be searched at start of tasks, before implementation steps, and before answering questions","Memory updates required after learning codebase structure, implementing features, discovering inconsistencies","Entities represent Components, Features, Patterns, and Practices with specific types","Observations should be atomic, factual statements (15 words max) about how things work","Relations connect entities with descriptive types like 'contains', 'uses', 'implements'","Prefer updating existing entities over creating duplicates","Agents must confirm memory operations in their thinking with specific summaries","Detailed memory usage workflow documented at docs/plans/memory_usage/improved_memory_usage.md","Implemented in .clinerules with mandatory retrieval and update workflows","Memory-First coding pattern documented in memory_first_coding_pattern.md with clear integration points","Quality standards and validation procedures defined in memory_quality_checks.md","Graph validation practices outlined in memory_graph_validation.md with scheduled validation activities","File changes tracked in memory graph with SourceFile, FileChange, and Plan entities"],"createdAt":"2025-04-16T00:44:32.118Z","version":4}
{"type":"entity","name":"LocationModel","entityType":"DataModel","observations":["Core data model used to represent geographic locations in the application","Implemented as a Freezed data class with JSON serialization support","Contains fields for coordinates, name, description, and metadata","Used throughout the LocationsFeature for data handling","Stored in platform-specific filesystem locations determined by HAL"],"createdAt":"2025-04-16T00:33:32.849Z","version":1}
{"type":"entity","name":"flutter_map","entityType":"Package","observations":["Used for implementing map functionality in the application","Based on leaflet.js for displaying interactive maps","Customized with a tile provider that supports error suppression","Maximum zoom level limited to 14 to optimize performance","Integrated with HAL for accessing map tile files"],"createdAt":"2025-04-16T00:33:42.022Z","version":1}
{"type":"entity","name":"riverpod","entityType":"Package","observations":["Primary state management and dependency injection framework","Used throughout the application for reactive state updates","Integrated with logging system via ProviderLogger","Provider scope wraps the application at the root level","Extensions provide convenient logger access through ref and context"],"createdAt":"2025-04-16T00:33:42.022Z","version":1}
{"type":"entity","name":"LogEntry","entityType":"DataModel","observations":["Freezed data class representing a log message with metadata","Contains timestamp, level, message, source, error, and stackTrace fields","Created by LoggerService when application code calls logging methods","Passed through LogFilters before being sent to LogOutputs","Immutable by design with all fields final"],"createdAt":"2025-04-16T00:34:12.137Z","version":1}
{"type":"entity","name":"ThemeState","entityType":"DataModel","observations":["Freezed model implementing sealed class pattern for theme modes","Provides light(), dark(), and system() factory constructors","Used by ThemeSystem to manage application theming","Persisted through SharedPreferences for user preferences","Updated to Freezed 3.x sealed class idiom"],"createdAt":"2025-04-16T00:34:12.137Z","version":1}
{"type":"entity","name":"FileChangeTracking","entityType":"Plan","observations":["Path: docs/plans/memory_usage/file_change_tracking.md","Purpose: Modernize file change tracking using memory graph","Status: In Progress"],"createdAt":"2025-04-16T00:44:07.356Z","version":1}
{"type":"entity","name":"FileChangeTrackingSystem","entityType":"Practice","observations":["Uses memory graph to track substantive file changes and their relationships to plans","Replaces the previous breadcrumbs system stored in .bot directories","Only tracks substantive code changes, not formatting or trivial modifications","Each file change is linked to source files and implementation plans"],"createdAt":"2025-04-16T00:44:07.356Z","version":1}
{"type":"entity","name":"ConversionResultsUI","entityType":"UIComponent","observations":["Redesigned to show black box on left with input unit and vertical list of conversions on right","Original design used separate cards for each conversion result","New design groups all conversions for same input into single card","Optimized for mobile devices and ePaper displays","Design plan located at docs/plans/conversion_ui_redesign/"],"createdAt":"2025-04-16T00:57:52.641Z","version":1}
{"type":"entity","name":"Conversion Results UI Redesign Plan","entityType":"Plan","observations":["Plan file: docs/plans/conversion_ui_redesign/conversion_results_ui_redesign_plan.md","Phases: Widget creation, Integration, Testing","Includes detailed checklist and success criteria"],"createdAt":"2025-04-16T01:09:43.198Z","version":1}
{"type":"entity","name":"modern_conversion_result_widget.dart","entityType":"SourceFile","observations":["Widget for redesigned conversion results UI","Located at pilot_buddy_app/lib/features/home/widgets/modern_conversion_result_widget.dart"],"createdAt":"2025-04-16T01:13:56.320Z","version":1}
{"type":"entity","name":"Initial ModernConversionResultWidget implementation","entityType":"FileChange","observations":["Created file and class with Row layout, left black box, right vertical list"],"createdAt":"2025-04-16T01:13:56.320Z","version":1}
{"type":"entity","name":"Responsive and ePaper-optimized ModernConversionResultWidget","entityType":"FileChange","observations":["Implemented responsive layout, scalable typography, and ePaper contrast in ModernConversionResultWidget"],"createdAt":"2025-04-16T01:17:22.298Z","version":1}
{"type":"entity","name":"unified_results_display.dart","entityType":"SourceFile","observations":["Widget that displays search results (conversions or locations)","Located at pilot_buddy_app/lib/features/home/widgets/unified_results_display.dart"],"createdAt":"2025-04-16T01:23:45.439Z","version":1}
{"type":"entity","name":"Integration of ModernConversionResultWidget","entityType":"FileChange","observations":["Updated _buildConversionResults to group conversions by input unit","Replaced ConversionResultWidget with ModernConversionResultWidget"],"createdAt":"2025-04-16T01:23:45.439Z","version":1}
{"type":"entity","name":"Fix ModernConversionResultWidget text colors and layout","entityType":"FileChange","observations":["Fixed text colors in right section from white to black/dark gray","Added Card wrapper to match mockup's bordered appearance"],"createdAt":"2025-04-16T01:26:16.761Z","version":1}
{"type":"entity","name":"Extend black box to full height","entityType":"FileChange","observations":["Made black box extend to full height of conversion results","Added minimum height constraint for cases with few results","Used IntrinsicHeight and stretch alignment for consistent height"],"createdAt":"2025-04-16T01:29:17.625Z","version":1}
{"type":"relation","from":"LoggingSystem","to":"LoggerService","relationType":"contains","createdAt":"2025-04-14T23:37:06.798Z","version":1}
{"type":"relation","from":"LoggingSystem","to":"LogFilters","relationType":"contains","createdAt":"2025-04-14T23:37:06.798Z","version":1}
{"type":"relation","from":"LoggingSystem","to":"LogOutputs","relationType":"contains","createdAt":"2025-04-14T23:37:06.798Z","version":1}
{"type":"relation","from":"LoggingSystem","to":"LogLevels","relationType":"uses","createdAt":"2025-04-14T23:37:06.798Z","version":1}
{"type":"relation","from":"LoggerService","to":"LogFilters","relationType":"uses","createdAt":"2025-04-14T23:37:06.798Z","version":1}
{"type":"relation","from":"LoggerService","to":"LogOutputs","relationType":"uses","createdAt":"2025-04-14T23:37:06.798Z","version":1}
{"type":"relation","from":"LoggerService","to":"LogLevels","relationType":"uses","createdAt":"2025-04-14T23:37:06.798Z","version":1}
{"type":"relation","from":"LoggingSystem","to":"RiverpodLoggingIntegration","relationType":"implements","createdAt":"2025-04-14T23:37:06.798Z","version":1}
{"type":"relation","from":"RiverpodLoggingIntegration","to":"LoggerService","relationType":"provides","createdAt":"2025-04-14T23:37:06.798Z","version":1}
{"type":"relation","from":"RiverpodLoggingIntegration","to":"LogFilters","relationType":"configures","createdAt":"2025-04-14T23:37:06.798Z","version":1}
{"type":"relation","from":"RiverpodLoggingIntegration","to":"LogOutputs","relationType":"configures","createdAt":"2025-04-14T23:37:06.798Z","version":1}
{"type":"relation","from":"ApplicationArchitecture","to":"LoggingSystem","relationType":"incorporates","createdAt":"2025-04-14T23:37:06.798Z","version":1}
{"type":"relation","from":"LoggingInRepositories","to":"LoggerService","relationType":"uses","createdAt":"2025-04-14T23:37:06.798Z","version":1}
{"type":"relation","from":"LoggingBestPractices","to":"LoggingSystem","relationType":"guides_usage_of","createdAt":"2025-04-14T23:37:06.798Z","version":1}
{"type":"relation","from":"TestLogging","to":"LoggerService","relationType":"adapts","createdAt":"2025-04-14T23:37:06.798Z","version":1}
{"type":"relation","from":"TestLogging","to":"LogLevels","relationType":"defaults_to_none","createdAt":"2025-04-14T23:37:06.798Z","version":1}
{"type":"relation","from":"TestLogging","to":"LogFilters","relationType":"overrides","createdAt":"2025-04-14T23:37:06.798Z","version":1}
{"type":"relation","from":"TestLogging","to":"LoggingBestPractices","relationType":"follows","createdAt":"2025-04-14T23:37:06.798Z","version":1}
{"type":"relation","from":"Maps","to":"LogFilters","relationType":"uses_for_error_suppression","createdAt":"2025-04-14T23:37:47.289Z","version":1}
{"type":"relation","from":"LoggingSystem","to":"Freezed","relationType":"uses_for_data_models","createdAt":"2025-04-14T23:37:47.289Z","version":1}
{"type":"relation","from":"Filesystem HAL Storage","to":"LoggerService","relationType":"uses_for_diagnostics","createdAt":"2025-04-14T23:37:47.289Z","version":1}
{"type":"relation","from":"Search Functionality","to":"LoggerService","relationType":"uses_for_diagnostics","createdAt":"2025-04-14T23:37:47.289Z","version":1}
{"type":"relation","from":"UI Guidelines","to":"LoggerService","relationType":"recommends_removing_from_production","createdAt":"2025-04-14T23:37:47.289Z","version":1}
{"type":"relation","from":"LogFiltering","to":"LogFilters","relationType":"describes_functionality_of","createdAt":"2025-04-14T23:57:22.041Z","version":1}
{"type":"relation","from":"LogFiltering","to":"TestLogging","relationType":"is_configured_differently_in","createdAt":"2025-04-14T23:57:22.041Z","version":1}
{"type":"relation","from":"LogFiltering","to":"LogLevels","relationType":"uses","createdAt":"2025-04-14T23:57:22.041Z","version":1}
{"type":"relation","from":"LoggerService","to":"LogFiltering","relationType":"applies","createdAt":"2025-04-14T23:57:22.041Z","version":1}
{"type":"relation","from":"RiverpodLoggingIntegration","to":"LogFiltering","relationType":"configures","createdAt":"2025-04-14T23:57:22.041Z","version":1}
{"type":"relation","from":"ProjectArchitecture","to":"ApplicationArchitecture","relationType":"refines","createdAt":"2025-04-15T10:18:17.196Z","version":1}
{"type":"relation","from":"ProjectArchitecture","to":"HAL","relationType":"contains","createdAt":"2025-04-15T10:18:17.196Z","version":1}
{"type":"relation","from":"ProjectArchitecture","to":"LoggingSystem","relationType":"contains","createdAt":"2025-04-15T10:18:17.196Z","version":1}
{"type":"relation","from":"ProjectArchitecture","to":"UIArchitecture","relationType":"contains","createdAt":"2025-04-15T10:18:17.196Z","version":1}
{"type":"relation","from":"HAL","to":"Filesystem HAL Storage","relationType":"implements","createdAt":"2025-04-15T10:18:17.196Z","version":1}
{"type":"relation","from":"HAL","to":"PermissionHandling","relationType":"incorporates","createdAt":"2025-04-15T10:18:17.196Z","version":1}
{"type":"relation","from":"HAL","to":"LoggerService","relationType":"uses_for_diagnostics","createdAt":"2025-04-15T10:18:17.196Z","version":1}
{"type":"relation","from":"RiverpodUsage","to":"RiverpodLoggingIntegration","relationType":"includes","createdAt":"2025-04-15T10:18:17.196Z","version":1}
{"type":"relation","from":"ProjectArchitecture","to":"RiverpodUsage","relationType":"uses_for_state_management","createdAt":"2025-04-15T10:18:17.196Z","version":1}
{"type":"relation","from":"ProjectArchitecture","to":"RepositoryPattern","relationType":"implements","createdAt":"2025-04-15T10:18:17.196Z","version":1}
{"type":"relation","from":"ProjectArchitecture","to":"ServicePattern","relationType":"implements","createdAt":"2025-04-15T10:18:17.196Z","version":1}
{"type":"relation","from":"RepositoryPattern","to":"HAL","relationType":"uses","createdAt":"2025-04-15T10:18:17.196Z","version":1}
{"type":"relation","from":"ServicePattern","to":"RepositoryPattern","relationType":"uses","createdAt":"2025-04-15T10:18:17.196Z","version":1}
{"type":"relation","from":"ServicePattern","to":"LoggerService","relationType":"exemplified_by","createdAt":"2025-04-15T10:18:17.196Z","version":1}
{"type":"relation","from":"UIArchitecture","to":"UI Guidelines","relationType":"follows","createdAt":"2025-04-15T10:18:17.196Z","version":1}
{"type":"relation","from":"UIArchitecture","to":"DataFlow","relationType":"consumes","createdAt":"2025-04-15T10:18:17.196Z","version":1}
{"type":"relation","from":"DataFlow","to":"ServicePattern","relationType":"routes_through","createdAt":"2025-04-15T10:18:17.196Z","version":1}
{"type":"relation","from":"RiverpodUsage","to":"DataFlow","relationType":"enables","createdAt":"2025-04-15T10:18:17.196Z","version":1}
{"type":"relation","from":"FreezedUsagePatterns","to":"Freezed","relationType":"implements","createdAt":"2025-04-15T10:18:17.196Z","version":1}
{"type":"relation","from":"FreezedUsagePatterns","to":"DataFlow","relationType":"supports_with_immutable_models","createdAt":"2025-04-15T10:18:17.196Z","version":1}
{"type":"relation","from":"TestingPatterns","to":"TestLogging","relationType":"includes","createdAt":"2025-04-15T10:18:17.196Z","version":1}
{"type":"relation","from":"TestingPatterns","to":"RiverpodUsage","relationType":"verifies","createdAt":"2025-04-15T10:18:17.196Z","version":1}
{"type":"relation","from":"ErrorHandling","to":"LoggingSystem","relationType":"leverages","createdAt":"2025-04-15T10:18:17.196Z","version":1}
{"type":"relation","from":"ErrorHandling","to":"PermissionHandling","relationType":"guides","createdAt":"2025-04-15T10:18:17.196Z","version":1}
{"type":"relation","from":"Maps","to":"HAL","relationType":"uses_for_file_access","createdAt":"2025-04-15T10:18:17.196Z","version":1}
{"type":"relation","from":"Search Functionality","to":"DataFlow","relationType":"demonstrates","createdAt":"2025-04-15T10:18:17.196Z","version":1}
{"type":"relation","from":"DataFlow","to":"LoggingSystem","relationType":"integrates_throughout","createdAt":"2025-04-15T10:18:17.196Z","version":1}
{"type":"relation","from":"LocationsFeature","to":"HAL","relationType":"uses","createdAt":"2025-04-15T10:19:00.418Z","version":1}
{"type":"relation","from":"LocationsFeature","to":"RepositoryPattern","relationType":"implements","createdAt":"2025-04-15T10:19:00.418Z","version":1}
{"type":"relation","from":"LocationsFeature","to":"LoggingSystem","relationType":"utilizes","createdAt":"2025-04-15T10:19:00.418Z","version":1}
{"type":"relation","from":"LocationsFeature","to":"Search Functionality","relationType":"integrated_with","createdAt":"2025-04-15T10:19:00.418Z","version":1}
{"type":"relation","from":"LocationsFeature","to":"Maps","relationType":"provides_data_for","createdAt":"2025-04-15T10:19:00.418Z","version":1}
{"type":"relation","from":"ProjectArchitecture","to":"BuildSystem","relationType":"built_with","createdAt":"2025-04-15T10:19:00.418Z","version":1}
{"type":"relation","from":"BuildSystem","to":"Freezed","relationType":"uses","createdAt":"2025-04-15T10:19:00.418Z","version":1}
{"type":"relation","from":"BuildSystem","to":"RiverpodUsage","relationType":"supports","createdAt":"2025-04-15T10:19:00.418Z","version":1}
{"type":"relation","from":"UIArchitecture","to":"NavigationSystem","relationType":"implements","createdAt":"2025-04-15T10:19:00.418Z","version":1}
{"type":"relation","from":"UIArchitecture","to":"ThemeSystem","relationType":"implements","createdAt":"2025-04-15T10:19:00.418Z","version":1}
{"type":"relation","from":"NavigationSystem","to":"SearchImplementation","relationType":"hosts","createdAt":"2025-04-15T10:19:00.418Z","version":1}
{"type":"relation","from":"ThemeSystem","to":"FreezedUsagePatterns","relationType":"uses_for_state","createdAt":"2025-04-15T10:19:00.418Z","version":1}
{"type":"relation","from":"SearchImplementation","to":"Search Functionality","relationType":"implements","createdAt":"2025-04-15T10:19:00.418Z","version":1}
{"type":"relation","from":"SearchImplementation","to":"RiverpodUsage","relationType":"uses_for_state","createdAt":"2025-04-15T10:19:00.418Z","version":1}
{"type":"relation","from":"MapsImplementation","to":"Maps","relationType":"implements","createdAt":"2025-04-15T10:19:00.418Z","version":1}
{"type":"relation","from":"MapsImplementation","to":"HAL","relationType":"uses_for_filesystem","createdAt":"2025-04-15T10:19:00.418Z","version":1}
{"type":"relation","from":"MapsImplementation","to":"ErrorHandling","relationType":"applies","createdAt":"2025-04-15T10:19:00.418Z","version":1}
{"type":"relation","from":"PersistenceStrategy","to":"HAL","relationType":"leverages","createdAt":"2025-04-15T10:19:00.418Z","version":1}
{"type":"relation","from":"PersistenceStrategy","to":"RepositoryPattern","relationType":"implemented_by","createdAt":"2025-04-15T10:19:00.418Z","version":1}
{"type":"relation","from":"PersistenceStrategy","to":"PermissionHandling","relationType":"depends_on","createdAt":"2025-04-15T10:19:00.418Z","version":1}
{"type":"relation","from":"ServicePattern","to":"PersistenceStrategy","relationType":"uses","createdAt":"2025-04-15T10:19:00.418Z","version":1}
{"type":"relation","from":"ProjectArchitecture","to":"PersistenceStrategy","relationType":"implements","createdAt":"2025-04-15T10:19:00.418Z","version":1}
{"type":"relation","from":"FutureFeatures","to":"ProjectArchitecture","relationType":"documents","createdAt":"2025-04-15T10:19:00.418Z","version":1}
{"type":"relation","from":"DevelopmentWorkflow","to":"BuildSystem","relationType":"utilizes","createdAt":"2025-04-15T10:19:48.614Z","version":1}
{"type":"relation","from":"DevelopmentWorkflow","to":"FutureFeatures","relationType":"implements","createdAt":"2025-04-15T10:19:48.614Z","version":1}
{"type":"relation","from":"BuildSystem","to":"DevelopmentWorkflow","relationType":"supports","createdAt":"2025-04-15T10:19:48.614Z","version":1}
{"type":"relation","from":"TestingStrategy","to":"TestingPatterns","relationType":"implements","createdAt":"2025-04-15T10:19:48.614Z","version":1}
{"type":"relation","from":"TestingStrategy","to":"TestLogging","relationType":"uses","createdAt":"2025-04-15T10:19:48.614Z","version":1}
{"type":"relation","from":"TestingStrategy","to":"RiverpodUsage","relationType":"leverages","createdAt":"2025-04-15T10:19:48.614Z","version":1}
{"type":"relation","from":"ProjectArchitecture","to":"TestingStrategy","relationType":"verified_by","createdAt":"2025-04-15T10:19:48.614Z","version":1}
{"type":"relation","from":"FlutterIdioms","to":"RiverpodUsage","relationType":"includes","createdAt":"2025-04-15T10:19:48.614Z","version":1}
{"type":"relation","from":"FlutterIdioms","to":"FreezedUsagePatterns","relationType":"includes","createdAt":"2025-04-15T10:19:48.614Z","version":1}
{"type":"relation","from":"FlutterIdioms","to":"HAL","relationType":"includes","createdAt":"2025-04-15T10:19:48.614Z","version":1}
{"type":"relation","from":"FlutterIdioms","to":"UIArchitecture","relationType":"guides","createdAt":"2025-04-15T10:19:48.614Z","version":1}
{"type":"relation","from":"ProjectArchitecture","to":"FlutterIdioms","relationType":"follows","createdAt":"2025-04-15T10:19:48.614Z","version":1}
{"type":"relation","from":"PerformanceConsiderations","to":"Maps","relationType":"optimizes","createdAt":"2025-04-15T10:19:48.614Z","version":1}
{"type":"relation","from":"PerformanceConsiderations","to":"SearchImplementation","relationType":"improves","createdAt":"2025-04-15T10:19:48.614Z","version":1}
{"type":"relation","from":"PerformanceConsiderations","to":"LoggingSystem","relationType":"manages","createdAt":"2025-04-15T10:19:48.614Z","version":1}
{"type":"relation","from":"UIArchitecture","to":"PerformanceConsiderations","relationType":"addresses","createdAt":"2025-04-15T10:19:48.614Z","version":1}
{"type":"relation","from":"DevelopmentWorkflow","to":"TestingStrategy","relationType":"incorporates","createdAt":"2025-04-15T10:19:48.614Z","version":1}
{"type":"relation","from":"MemoryUsageWorkflow","to":"DevelopmentWorkflow","relationType":"enhances","createdAt":"2025-04-16T00:19:14.645Z","version":1}
{"type":"relation","from":"MemoryUsageWorkflow","to":"TestingStrategy","relationType":"improves_context_for","createdAt":"2025-04-16T00:19:14.645Z","version":1}
{"type":"relation","from":"DevelopmentWorkflow","to":"MemoryUsageWorkflow","relationType":"incorporates","createdAt":"2025-04-16T00:19:14.645Z","version":1}
{"type":"relation","from":"FutureFeatures","to":"MemoryUsageWorkflow","relationType":"documented_by","createdAt":"2025-04-16T00:19:14.645Z","version":1}
{"type":"relation","from":"LocationModel","to":"LocationsFeature","relationType":"used_by","createdAt":"2025-04-16T00:33:54.500Z","version":1}
{"type":"relation","from":"LocationModel","to":"Freezed","relationType":"implemented_with","createdAt":"2025-04-16T00:33:54.500Z","version":1}
{"type":"relation","from":"LocationModel","to":"Filesystem HAL Storage","relationType":"stored_via","createdAt":"2025-04-16T00:33:54.500Z","version":1}
{"type":"relation","from":"flutter_map","to":"MapsImplementation","relationType":"used_by","createdAt":"2025-04-16T00:33:54.500Z","version":1}
{"type":"relation","from":"riverpod","to":"RiverpodUsage","relationType":"implemented_by","createdAt":"2025-04-16T00:33:54.500Z","version":1}
{"type":"relation","from":"riverpod","to":"LoggingSystem","relationType":"integrates_with","createdAt":"2025-04-16T00:33:54.500Z","version":1}
{"type":"relation","from":"LogFiltering","to":"Maps","relationType":"used_for_error_suppression","createdAt":"2025-04-16T00:34:01.445Z","version":1}
{"type":"relation","from":"LogFiltering","to":"PerformanceConsiderations","relationType":"contributes_to","createdAt":"2025-04-16T00:34:01.445Z","version":1}
{"type":"relation","from":"LogFiltering","to":"ErrorHandling","relationType":"enhances","createdAt":"2025-04-16T00:34:01.445Z","version":1}
{"type":"relation","from":"Freezed","to":"LogEntry","relationType":"used_to_implement","createdAt":"2025-04-16T00:34:01.445Z","version":1}
{"type":"relation","from":"LogEntry","to":"LoggerService","relationType":"created_by","createdAt":"2025-04-16T00:34:19.485Z","version":1}
{"type":"relation","from":"LogEntry","to":"LogFilters","relationType":"processed_by","createdAt":"2025-04-16T00:34:19.485Z","version":1}
{"type":"relation","from":"LogEntry","to":"LogOutputs","relationType":"sent_to","createdAt":"2025-04-16T00:34:19.485Z","version":1}
{"type":"relation","from":"ThemeState","to":"ThemeSystem","relationType":"used_by","createdAt":"2025-04-16T00:34:19.485Z","version":1}
{"type":"relation","from":"ThemeState","to":"Freezed","relationType":"implemented_with","createdAt":"2025-04-16T00:34:19.485Z","version":1}
{"type":"relation","from":"ThemeState","to":"FreezedUsagePatterns","relationType":"exemplifies","createdAt":"2025-04-16T00:34:19.485Z","version":1}
{"type":"relation","from":"FileChangeTrackingSystem","to":"MemoryUsageWorkflow","relationType":"extends","createdAt":"2025-04-16T00:44:24.226Z","version":1}
{"type":"relation","from":"FileChangeTracking","to":"FileChangeTrackingSystem","relationType":"defines","createdAt":"2025-04-16T00:44:24.226Z","version":1}
{"type":"relation","from":"Initial ModernConversionResultWidget implementation","to":"modern_conversion_result_widget.dart","relationType":"modifies","createdAt":"2025-04-16T01:14:33.211Z","version":1}
{"type":"relation","from":"Initial ModernConversionResultWidget implementation","to":"Conversion Results UI Redesign Plan","relationType":"implements","createdAt":"2025-04-16T01:14:33.211Z","version":1}
{"type":"relation","from":"modern_conversion_result_widget.dart","to":"Conversion Results UI Redesign Plan","relationType":"defined by plan","createdAt":"2025-04-16T01:14:33.212Z","version":1}
{"type":"relation","from":"Responsive and ePaper-optimized ModernConversionResultWidget","to":"modern_conversion_result_widget.dart","relationType":"modifies","createdAt":"2025-04-16T01:18:08.500Z","version":1}
{"type":"relation","from":"Responsive and ePaper-optimized ModernConversionResultWidget","to":"Conversion Results UI Redesign Plan","relationType":"implements","createdAt":"2025-04-16T01:18:08.500Z","version":1}
{"type":"relation","from":"Integration of ModernConversionResultWidget","to":"unified_results_display.dart","relationType":"modifies","createdAt":"2025-04-16T01:23:51.994Z","version":1}
{"type":"relation","from":"Integration of ModernConversionResultWidget","to":"Conversion Results UI Redesign Plan","relationType":"implements","createdAt":"2025-04-16T01:23:51.994Z","version":1}
{"type":"relation","from":"unified_results_display.dart","to":"Conversion Results UI Redesign Plan","relationType":"defined by plan","createdAt":"2025-04-16T01:23:51.994Z","version":1}
{"type":"relation","from":"Fix ModernConversionResultWidget text colors and layout","to":"modern_conversion_result_widget.dart","relationType":"modifies","createdAt":"2025-04-16T01:26:21.578Z","version":1}
{"type":"relation","from":"Fix ModernConversionResultWidget text colors and layout","to":"Conversion Results UI Redesign Plan","relationType":"implements","createdAt":"2025-04-16T01:26:21.578Z","version":1}
{"type":"relation","from":"Extend black box to full height","to":"modern_conversion_result_widget.dart","relationType":"modifies","createdAt":"2025-04-16T01:29:22.691Z","version":1}
{"type":"relation","from":"Extend black box to full height","to":"Conversion Results UI Redesign Plan","relationType":"implements","createdAt":"2025-04-16T01:29:22.691Z","version":1}