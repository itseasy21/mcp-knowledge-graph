{"type":"entity","name":"MemoryServer","entityType":"Server","observations":["Memory MCP server initialized with command: npx -y @itseasy21/mcp-knowledge-graph --memory-path ./.roo/memory.jsonl"],"createdAt":"2025-04-14T23:14:34.937Z","version":1}
{"type":"entity","name":"Freezed","entityType":"Library","observations":["location.dart and theme_state.dart updated to use sealed class idiom for Freezed 3.x compliance.","Freezed models use @freezed (lowercase), sealed class, private constructor for custom methods, and non-const factories.","Freezed factory usage updated to remove const.","build_runner and all tests pass after migration."],"createdAt":"2025-04-14T23:31:06.984Z","version":1}
{"type":"entity","name":"Filesystem HAL Storage","entityType":"Component","observations":["Phase 1 (repository interface and config) of the filesystem HAL storage plan is complete.","Platform-specific repository tests exist for Android, iOS, and Web.","All platforms now check filesystem first in loadLocations().","Storage permission is requested via HAL on app boot; app blocks startup if denied."],"createdAt":"2025-04-14T23:31:06.984Z","version":1}
{"type":"entity","name":"UI Guidelines","entityType":"Practice","observations":["AppBar and drawer are siblings in MainNavigationScreen; HomeScreen is a content widget only.","Settings screen and map tile error suppression are implemented.","All animations were removed from UnifiedResultsDisplay for search results to fix layout errors.","Diagnostic logs are removed from production UI code."],"createdAt":"2025-04-14T23:31:06.984Z","version":1}
{"type":"entity","name":"Search Functionality","entityType":"Feature","observations":["SearchBar is connected to searchControllerProvider in MainNavigationScreen.","_onSearch method with debouncing is implemented.","SearchBar callbacks updated to call _onSearch.","Clear button clears search controller state.","AnimatedCrossFade and AnimatedSwitcher were removed from search UI to fix RenderAnimatedSize layout errors.","The issue originated from a refactor where the SearchBar was moved but lost its connection to the search controller.","UI tests are used to diagnose search reliability issues with multiple consecutive conversion searches."],"createdAt":"2025-04-14T23:31:06.984Z","version":1}
{"type":"entity","name":"Maps","entityType":"Feature","observations":["Map tile path is platform-aware: uses /sdcard/filesystem/20MAR2025/maps on Android, relative path on desktop/web.","Maximum zoom level for maps is set to 14 (was 18).","Custom tile provider can suppress map tile errors.","Settings allow toggling map tile error visibility."],"createdAt":"2025-04-14T23:31:06.984Z","version":1}
{"type":"entity","name":"LoggingSystem","entityType":"Architecture","observations":["Core components include LogLevel enum, LogEntry model, LogOutput interface, LogFilter interface, and LoggerService","LogLevel defines severity levels: none, debug, info, warning, error, fatal","LogEntry is a Freezed data class representing a log message with metadata (timestamp, level, message, source, error, stackTrace)","LoggerService is the central component that manages outputs, filters, and provides log methods","Log flow: Application code calls logger methods → LoggerService creates LogEntry → Entry is checked against filters → If it passes, sent to all outputs","Multiple output targets are supported (console, expandable to file, cloud, etc.)","ConsoleLogOutput provides terminal output with color formatting and icons for success/fail messages","Integration with Riverpod for dependency injection and state management","Global error catching is integrated via runZonedGuarded in main.dart"],"createdAt":"2025-04-14T23:36:52.851Z","version":1}
{"type":"entity","name":"LoggerService","entityType":"Service","observations":["Main service that handles log routing and filtering","Provides convenience methods for each log level: debug, info, warning, error, fatal","Can be created with named source for context-specific logging","Manages lists of LogOutput and LogFilter implementations","Creates LogEntry objects with timestamp, level, message, and optional context","Checks if entry passes all filters before sending to outputs","Can be injected into classes via constructor or accessed via extension methods","Extension methods allow access from Ref, WidgetRef, and BuildContext"],"createdAt":"2025-04-14T23:36:52.851Z","version":1}
{"type":"entity","name":"LogFilters","entityType":"Component","observations":["LogFilter is an interface with shouldLog(LogEntry) method that returns boolean","LevelLogFilter is the primary implementation that filters based on minimum severity level","Custom filters can be created by implementing LogFilter interface","Multiple filters can be chained; an entry must pass ALL filters to be logged","Filters are configured via the logFiltersProvider in Riverpod","Sensitive data can be filtered using custom filter implementations","Map tile error messages can be completely suppressed when enabled through settings"],"createdAt":"2025-04-14T23:36:52.851Z","version":1}
{"type":"entity","name":"LogOutputs","entityType":"Component","observations":["LogOutput is an interface with log(LogEntry) and dispose() methods","ConsoleLogOutput is the primary implementation that formats and writes to console","Custom outputs can be created by implementing LogOutput interface","Multiple outputs can receive the same log entry simultaneously","Outputs are configured via the logOutputsProvider in Riverpod","FileLogOutput example shows how to implement file-based logging with rotation","Each output formats log entries according to its own requirements"],"createdAt":"2025-04-14T23:36:52.851Z","version":1}
{"type":"entity","name":"TestLogging","entityType":"Practice","observations":["Tests use a specific logging configuration defined in test/helpers/test_config.dart","By default, tests suppress all logs by setting the log level to NONE to keep output clean","createTestContainer() function creates a Riverpod container with test logging configuration","createTestLogger() creates a logger with the default test configuration","Tests should add debug logs when they fail to help diagnose issues, then remove them once fixed","Descriptive sources should be used for loggers in tests (e.g., 'UserAuthTest')","Custom log configurations should be reset after test debugging","TestLogOutput implementation can capture and verify logging behavior in tests"],"createdAt":"2025-04-14T23:36:52.851Z","version":1}
{"type":"entity","name":"LogLevels","entityType":"Enumeration","observations":["none: Suppresses all logs (useful for tests or silencing output)","debug: Detailed information for debugging (configuration loaded, variable values)","info: Normal application behavior information (user logged in, operation completed)","warning: Potential issues that don't prevent operation (rate limit approaching)","error: Application failures that affect functionality (API failures, data load errors)","fatal: Critical failures that prevent application from continuing (database connection lost)","In tests, default level is none (suppress all) but can be raised for debugging","Production code usually uses debug or info as the minimum level"],"createdAt":"2025-04-14T23:36:52.851Z","version":1}
{"type":"entity","name":"LoggingInRepositories","entityType":"Pattern","observations":["Repositories inject LoggerService via constructor","Typically use debug level for data operations (getting/setting data)","Use info level for important state changes","Use warning for non-critical issues (e.g., empty results when expected data)","Use error level for operation failures with error and stack trace","Structured logging with context (IDs, query parameters)","LocationsRepository is a key example that uses injected LoggerService","All repository methods include appropriate logging"],"createdAt":"2025-04-14T23:36:52.851Z","version":1}
{"type":"entity","name":"RiverpodLoggingIntegration","entityType":"Pattern","observations":["loggerServiceProvider creates the main LoggerService instance","logOutputsProvider configures the list of LogOutput implementations","logFiltersProvider configures the list of LogFilter implementations","namedLoggerProvider.family creates source-specific loggers","Extension methods on Ref (ref.logger, ref.loggerFor)","Extension methods on WidgetRef (ref.logger, ref.loggerFor)","Extension methods on BuildContext (context.logger)","ProviderLogger integrates with Riverpod's logging system"],"createdAt":"2025-04-14T23:36:52.851Z","version":1}
{"type":"entity","name":"ApplicationArchitecture","entityType":"Architecture","observations":["Follows Repository-Service-Provider Pattern with Riverpod","Data flow: Data Sources → Repositories → Services → Providers → UI Components","Repositories handle data operations and abstract data sources","Service Layer adds business logic on top of repositories","Riverpod Providers expose repositories and transform repository data","StateNotifier classes bridge between repositories/services and UI","UI Components consume providers to access state and update based on changes","Logging is integrated at all levels of the architecture"],"createdAt":"2025-04-14T23:36:52.851Z","version":1}
{"type":"entity","name":"LoggingBestPractices","entityType":"Practice","observations":["Use appropriate log levels: Reserve error and fatal for actual errors","Include context: Add meaningful source names and context to log messages","Structure messages: Format log messages consistently for easier searching","Don't over-log: In performance-critical code paths, consider if logging is necessary","Respect privacy: Avoid logging sensitive data like passwords or tokens","Use named loggers: For larger classes or subsystems, use named loggers","In tests: Use the default NONE level for most tests, only temporarily lower for debugging","Always log errors with stack traces for better troubleshooting"],"createdAt":"2025-04-14T23:36:52.851Z","version":1}
{"type":"entity","name":"LogFiltering","entityType":"Concept","observations":["Log filtering determines which log entries are processed based on filters like log level or content","LevelLogFilter is the primary implementation that filters logs based on minimum severity level","In normal app operation, logging is typically set to INFO or DEBUG level using logFiltersProvider","In tests, logs are filtered to NONE level by default (complete suppression) via test_config.dart","createTestContainer() creates a Riverpod container with test log filtering set to NONE","Debugging failing tests involves temporarily changing log filter level to DEBUG or INFO","Map tile errors can be completely filtered out using a dedicated filter when enabled in settings","LogFilter interface requires implementing shouldLog(LogEntry) method that returns boolean","Multiple filters can be chained; an entry must pass ALL filters to be processed","Custom log filters like SensitiveDataFilter can redact sensitive information without blocking logs","logFiltersProvider in Riverpod configures the active list of LogFilter implementations"],"createdAt":"2025-04-14T23:57:15.319Z","version":1}
{"type":"relation","from":"LoggingSystem","to":"LoggerService","relationType":"contains","createdAt":"2025-04-14T23:37:06.798Z","version":1}
{"type":"relation","from":"LoggingSystem","to":"LogFilters","relationType":"contains","createdAt":"2025-04-14T23:37:06.798Z","version":1}
{"type":"relation","from":"LoggingSystem","to":"LogOutputs","relationType":"contains","createdAt":"2025-04-14T23:37:06.798Z","version":1}
{"type":"relation","from":"LoggingSystem","to":"LogLevels","relationType":"uses","createdAt":"2025-04-14T23:37:06.798Z","version":1}
{"type":"relation","from":"LoggerService","to":"LogFilters","relationType":"uses","createdAt":"2025-04-14T23:37:06.798Z","version":1}
{"type":"relation","from":"LoggerService","to":"LogOutputs","relationType":"uses","createdAt":"2025-04-14T23:37:06.798Z","version":1}
{"type":"relation","from":"LoggerService","to":"LogLevels","relationType":"uses","createdAt":"2025-04-14T23:37:06.798Z","version":1}
{"type":"relation","from":"LoggingSystem","to":"RiverpodLoggingIntegration","relationType":"implements","createdAt":"2025-04-14T23:37:06.798Z","version":1}
{"type":"relation","from":"RiverpodLoggingIntegration","to":"LoggerService","relationType":"provides","createdAt":"2025-04-14T23:37:06.798Z","version":1}
{"type":"relation","from":"RiverpodLoggingIntegration","to":"LogFilters","relationType":"configures","createdAt":"2025-04-14T23:37:06.798Z","version":1}
{"type":"relation","from":"RiverpodLoggingIntegration","to":"LogOutputs","relationType":"configures","createdAt":"2025-04-14T23:37:06.798Z","version":1}
{"type":"relation","from":"ApplicationArchitecture","to":"LoggingSystem","relationType":"incorporates","createdAt":"2025-04-14T23:37:06.798Z","version":1}
{"type":"relation","from":"LoggingInRepositories","to":"LoggerService","relationType":"uses","createdAt":"2025-04-14T23:37:06.798Z","version":1}
{"type":"relation","from":"LoggingBestPractices","to":"LoggingSystem","relationType":"guides_usage_of","createdAt":"2025-04-14T23:37:06.798Z","version":1}
{"type":"relation","from":"TestLogging","to":"LoggerService","relationType":"adapts","createdAt":"2025-04-14T23:37:06.798Z","version":1}
{"type":"relation","from":"TestLogging","to":"LogLevels","relationType":"defaults_to_none","createdAt":"2025-04-14T23:37:06.798Z","version":1}
{"type":"relation","from":"TestLogging","to":"LogFilters","relationType":"overrides","createdAt":"2025-04-14T23:37:06.798Z","version":1}
{"type":"relation","from":"TestLogging","to":"LoggingBestPractices","relationType":"follows","createdAt":"2025-04-14T23:37:06.798Z","version":1}
{"type":"relation","from":"Maps","to":"LogFilters","relationType":"uses_for_error_suppression","createdAt":"2025-04-14T23:37:47.289Z","version":1}
{"type":"relation","from":"LoggingSystem","to":"Freezed","relationType":"uses_for_data_models","createdAt":"2025-04-14T23:37:47.289Z","version":1}
{"type":"relation","from":"Filesystem HAL Storage","to":"LoggerService","relationType":"uses_for_diagnostics","createdAt":"2025-04-14T23:37:47.289Z","version":1}
{"type":"relation","from":"Search Functionality","to":"LoggerService","relationType":"uses_for_diagnostics","createdAt":"2025-04-14T23:37:47.289Z","version":1}
{"type":"relation","from":"UI Guidelines","to":"LoggerService","relationType":"recommends_removing_from_production","createdAt":"2025-04-14T23:37:47.289Z","version":1}
{"type":"relation","from":"LogFiltering","to":"LogFilters","relationType":"describes_functionality_of","createdAt":"2025-04-14T23:57:22.041Z","version":1}
{"type":"relation","from":"LogFiltering","to":"TestLogging","relationType":"is_configured_differently_in","createdAt":"2025-04-14T23:57:22.041Z","version":1}
{"type":"relation","from":"LogFiltering","to":"LogLevels","relationType":"uses","createdAt":"2025-04-14T23:57:22.041Z","version":1}
{"type":"relation","from":"LoggerService","to":"LogFiltering","relationType":"applies","createdAt":"2025-04-14T23:57:22.041Z","version":1}
{"type":"relation","from":"RiverpodLoggingIntegration","to":"LogFiltering","relationType":"configures","createdAt":"2025-04-14T23:57:22.041Z","version":1}